name: Deploy Docker Compose to Test EC2

# test 브랜치에 Pull Request가 열리거나 merge되거나 push될 때 워크플로우 실행
on:
  pull_request:
    branches:
      - test
  push:
    branches:
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
            java-version: '21'
            distribution: 'temurin'


      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3



      - name: Grant execute permission for gradlew
        run: chmod +x gradlew


      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-app:latest .

      # 4. DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker 이미지를 Docker Hub에 푸시
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest


       # 6. EC2로 SSH 접속하여 Docker Compose로 배포
      - name: SSH to EC2 and deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.TEST_EC2_HOST }}
          username: ${{ secrets.TEST_EC2_USER }}
          key: ${{ secrets.TEST_EC2_SSH_KEY }}
          script: |
            # 1. 배포 디렉토리로 이동
            echo "📂 Moving to deployment directory"
            cd /home/ubuntu/docker/app
            
            # 2. spring-app 컨테이너 중지
            echo "🛑 Stopping spring-app container"
            docker-compose stop spring-app
            
            # 3. spring-app 컨테이너 삭제
            echo "🧹 Removing spring-app container"
            docker-compose rm -f spring-app
            
            # 4. 최신 이미지 pull
            echo "📥 Pulling latest spring-app image"
            docker-compose pull spring-app
            
            # 5. 새 컨테이너로 실행
            echo "🚀 Starting new spring-app container"
            docker-compose up -d spring-app
            
            # 6. 사용하지 않는 이미지/컨테이너 정리
            echo "🧼 Cleaning up unused Docker resources"
            docker system prune -f
          
